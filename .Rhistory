in_2019
in_2020 <- seq(as.Date("2020-01-01"),as.Date("2020-12-31"),by="1 day")
in_2020
in_2020 <- subset(dates, dates > as.Date("2020-01-01"))
in_2020
in_2020 <- subset(dates, dates > as.Date("2020-01-01"))
in_2020
in_2019 <- subset(dates, dates > as.Date("2019-01-01"))
in_2019
ratio_2020_2019 <- length(in_2020)/length(in_2019)
ratio_2020_2019
dates <- as.Date(protests$Date)
dates
missing_summary <- count_in_location("Beijing")
missing_summary
count_on_date <- function(date) {
dates <- as.Date(protests$Date)
protests_num <- length(subset(protests, dates = date))
return(sprintf("There were %i protests on %s.", protests_num, date))
}
num_may_24 <- count_on_date("2020-05-24")
print(num_may_24)
num_on_may_31 <- count_on_date("2020-05-31")
num_on_may_31
num_on_may_31 <- count_on_date("2020-05-06")
num_on_may_31
num_on_may_31 <- count_on_date("2020-12-31")
num_on_may_31
num_on_may_31 <- count_on_date("2019-08-06")
num_on_may_31
count_on_date <- function(date) {
total_protest <- length(subset(protests, Date = date))
return(sprintf("There were %i protests on %s.", total_protest, as.Date(date)))
}
num_may_24 <- count_on_date("2020-05-24")
print(num_may_24)
num_on_may_31 <- count_on_date("2020-05-31")
num_on_may_31
count_on_date <- function(date) {
dates <- as.Date(protests$Date)
p <- length(subset(protests, dates = date))
return(sprintf("There were %i protests on %s.", total_protest, date))
}
num_may_24 <- count_on_date("2020-05-24")
count_on_date <- function(date) {
dates <- as.Date(protests$Date)
protests_num <- length(subset(protests, dates = date))
return(sprintf("There were %i protests on %s.", protests_num, date))
}
num_may_24 <- count_on_date("2020-05-24")
print(num_may_24)
by_month_table_2020 <- table(months(in_2020))
View(by_month_table_2020)
july_2020 <- by_month_table_2020[5][1]
print(july_2020)
july_2019 <- by_month_table_2019[6][1]
by_month_table_2019 <- table(months(in_2019))
View(by_month_table_2019)
july_2020 <- by_month_table_2020[5][1]
print(july_2020)
july_2019 <- by_month_table_2019[6][1]
print(july_2019)
change_july_protests <- july_2020 - july_2019
print(change_july_protests)
purpose <- protests$Event..legacy..see.tags.
purpose <- protests$Event..legacy..see.tags.
purpose
protests <- read.csv("https://countlove.org/data/data.csv")
num_attendees <- protests$Attendees
num_attendees
num_features <- ncol(protests)
num_features
num_on_may_31 <- count_on_date("1975-05-31")
num_on_may_31
count_on_date <- function(date) {
dates <- as.Date(protests$Date)
protests_num <- sum(dates == as.Date(date))
return(sprintf("There were %i protests on %s.", protests_num, date))
}
num_may_24 <- count_on_date("2020-05-24")
print(num_may_24)
num_on_may_31 <- count_on_date("2020-05-31")
num_on_may_31
num_may_24 <- count_on_date("1988-05-24")
print(num_may_24)
by_month_table_2020 <- table(months(in_2020))
View(by_month_table_2020)
july_2020 <- by_month_table_2020[5][1]
print(july_2020)
num_purposes <- length(unique(purpose))
num_purposes
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(protests$purpose, "\\s\\(.*\\)", "")
return(modified_purposes)
}
high_level_purpose <- get_purposes()
high_level_purpose
high_level_purpose <- get_purposes()
num_locations <- length(unique(locations))
num_locations
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(protests$purpose, "\\s\\(.*\\)", "")
return(modified_purposes)
}
high_level_purpose <- get_purposes()
high_level_purpose
print(purpose)
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(purpose, "\\\\", "")
return(modified_purposes)
}
igh_level_purpose <- get_purposes()
high_level_purpose
high_level_purpose <- gsub("\\s*\\([^\\)]+\\)", "", high_level_purpose)
unlist(high_level_purpose)
high_level_purpose <- get_purposes()
high_level_purpose
high_level_purpose <- get_purposes()
high_level_purpose
num_high_level <- length(high_level_purpse)
num_high_level <- length(high_level_purpose)
num_high_level
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(purpose, "\\\\", "")
return(modified_purposes)
}
high_level_purpose <- get_purposes()
high_level_purpose
num_high_level <- length(high_level_purpose)
num_high_level
high_level_purpose <- gsub("\\s*\\([^\\)]+\\)", "", high_level_purpose)
unlist(high_level_purpose)
high_level_purpose <- get_purposes()
high_level_purpose
num_high_level <- length(high_level_purpose)
num_high_level
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(purpose, "\\\\", "")
return(modified_purposes)
}
high_level_purpose <- get_purposes()
high_level_purpose
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(purpose, "\\+-[]", "")
return(modified_purposes)
}
high_level_purpose <- get_purposes()
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(purpose, "\\+-", "")
return(modified_purposes)
}
high_level_purpose <- get_purposes()
high_level_purpose
num_high_level <- length(high_level_purpose)
num_high_level
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(purpose, "\\+", "")
return(modified_purposes)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
high_level_purpose
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(high_level_purpose)
num_high_level
library(stringr)
get_purposes <- function() {
modified_purposes <- str_replace(purpose, "\\+-666", "")
return(modified_purposes)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
high_level_purpose
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(high_level_purpose)
num_high_level
high_level_table <- table(high_level_purpose)
View(high_level_table)
high_level_table <- table(num_high_level)
View(high_level_table)
high_level_table <- table(high_level_purpose)
View(high_level_table)
format_doc <- function(protest_df, purpose, position_taken=NULL) {
# Heading components
heading1 <- paste("# Protest purpose: ", purpose, "\n")
heading2 <- "\n"
if (!is.null(position_taken)) {
heading2 <- paste("## Position taken: ", position_taken, "\n")
}
# Summary component
num_protests <- format(nrow(protest_df), big.mark=",")
total_attendees <- format(sum(protest_df$Attendees, na.rm=TRUE), big.mark=",")
summary <- paste0("_Summary_\n\n",
"* Number of Protests: ", num_protests, "\n",
"* Total Attendees: ", total_attendees, "\n\n",
"_List of Protests (Attendees)_\n\n")
# List of protests component (Note: Bullet_list is a vector)
bullet_list <- paste0("* ", protest_df$Date, ": ", protest_df$Location,
" [Article](", protest_df$Source, ")", " (_", protest_df$Attendees, "_)\n")
# Collapse the vector into a string
url_str <- paste0(bullet_list, collapse="")
# Paste together each of the report components
md_doc <- paste0(heading1, heading2, summary, url_str)
return(md_doc)
}
write_report <- function(md_doc, fname="~/Documents/info201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
filter_protests <- function(protest_df, category, position_taken = NULL) {
# Filter protests based on category
filtered_df <- subset(protest_df, purpose == category)
# If position_taken is provided, further filter protests based on position_taken
if (!is.null(position_taken)) {
filtered_df <- subset(filtered_df, position_taken == position_taken)
}
return(filtered_df)
}
prop_in_wa <- num_in_wa/num_locations
prop_in_wa
library(stringr)
locations_in_wa <- str_detect(str_sub(unlist(protests$Location),-2,-1), "WA")
num_in_wa <- sum(locations_in_wa == TRUE)
num_in_wa
state_summary <- sapply(uniq_states, count_in_location)
state_summary
state_table <- table(state_summary)
View(state_table)
install.packages("lintr")
library(lintr)
protests <- read.csv("https://countlove.org/data/data.csv")
View(protests)
View(protests)
num_protests <- nrow(protests)
num_protests
num_protests <- nrow(protests)
num_protests <- nrow(protests)
num_protests
num_in_wa <- sum(str-detact(locations,"WA"), na.rm == TRUE)
num_in_wa <- sum(str_detact(locations,"WA"), na.rm == TRUE)
library(stringr)
num_in_wa <- sum(str_detact(locations,"WA"), na.rm == TRUE)
library(stringr)
num_in_wa <- sum(str_detact(locations,"WA"), na.rm == TRUE)
library(stringr)
num_in_wa <- sum(str_detact(locations,"WA"), na.rm == TRUE)
library(stringr)
num_in_wa <- sum(str_detact(locations,"WA"), na.rm == TRUE)
library(stringr)
num_in_wa <- sum(str_detect(locations, "WA"), na.rm = TRUE)
num_in_wa
num_in_wa <- sum(str_detect(locations, "WA"), na.rm = TRUE)
num_in_wa
prop_in_wa <- num_in_wa/num_locations
prop_in_wa
prop_in_wa <- num_in_wa/length(locations)
prop_in_wa
count_in_location <- function(LOCATION) {
locations <- protests$Location
location_summary <- sum(str_detect(unlist(locations), LOCATION))
if (location_summary > 0) {
return(sprintf("There were", location_summary, "protests in", LOCATION, "."))
} else {
return(sprintf("Location", (LOCATION), "not found."))
}
}
dc_summary <- count_in_location("Washington, DC")
dc_summary
count_in_location <- function(LOCATION) {
locations <- protests$Location
location_summary <- sum(str_detect(unlist(locations), LOCATION))
if (location_summary > 0) {
return(sprintf("There were %d protests in %s.", location_summary, LOCATION))
} else {
return(sprintf("Location %s not found.", LOCATION))
}
}
dc_summary <- count_in_location("Washington, DC")
dc_summary
minneapolis_summary <- count_in_location("Minneapolis")
minneapolis_summary
missing_summary <- count_in_location("Beijing")
missing_summary
count_in_location <- function(LOCATION) {
locations <- protests$Location
location_summary <- sum(str_detect(unlist(locations), LOCATION))
if (location_summary > 0) {
return(sprintf("There were %d protests in %s.", location_summary, LOCATION))
} else {
return(sprintf("Location %s not found.", "LOCATION"))
}
}
missing_summary <- count_in_location("Beijing")
missing_summary
count_in_location <- function(LOCATION) {
locations <- protests$Location
location_summary <- sum(str_detect(unlist(locations), LOCATION))
if (location_summary > 0) {
return(sprintf("There were %d protests in %s.", location_summary, LOCATION))
} else {
return(sprintf("Location %s not found.", (LOCATION)))
}
}
missing_summary <- count_in_location("Beijing")
missing_summary
count_in_location <- function(LOCATION) {
locations <- protests$Location
location_summary <- sum(str_detect(unlist(locations), LOCATION))
if (location_summary > 0) {
return(sprintf("There were %d protests in %s.", location_summary, LOCATION))
} else {
return(sprintf("Location (%s) not found.", LOCATION))
}
}
missing_summary <- count_in_location("Beijing")
missing_summary
states <- str_sub(locations,-2,-1)
states
states <- str_sub(unlist(locations),-2,-1)
states
state_summary <- sapply(uniq_states, count_in_location)
state_summary
in_2020 <- subset(dates, dates > as.Date("2020-01-01"))
in_2020
in_2020 <- dates[year(dates) == 2020]
in_2020 <- dates[dates >= "2020-01-01" & dates <= "2020-12-31"]
in_2020
in_2019 <- dates[dates >= "2019-01-01" & dates <= "2019-12-31"]
in_2019
ratio_2020_2019 <- length(in_2020)/length(in_2019)
ratio_2020_2019
num_may_24 <- count_on_date("1975-05-24")
print(num_may_24)
count_on_date <- function(date) {
dates <- as.Date(protests$Date)
protests_num <- sum(dates == as.Date(date))
return(sprintf("There were %d protests on %s.", protests_num, date))
}
num_may_24 <- count_on_date("1975-05-24")
print(num_may_24)
num_on_may_31 <- count_on_date("2020-05-31")
num_on_may_31
by_month_table_2020 <- table(months(in_2020))
View(by_month_table_2020)
count_on_date <- function(date) {
protests_num <- sum(str_detect(dates, date))
return(sprintf("There were %d protests on %s.", protests_num, date))
}
num_may_24 <- count_on_date("1975-05-24")
print(num_may_24)
num_on_may_31 <- count_on_date("2020-05-31")
num_on_may_31
num_may_24 <- count_on_date("1975-05-24")
print(num_may_24)
num_on_may_31 <- count_on_date("2020-05-31")
num_on_may_31
by_month_table_2020 <- table(months(in_2020))
View(by_month_table_2020)
by_month_table_2019 <- table(months(in_2019))
View(by_month_table_2019)
july_2020 <- by_month_table_2020[5][1]
print(july_2020)
july_2019 <- by_month_table_2019[6][1]
print(july_2019)
change_july_protests <- july_2020 - july_2019
print(change_july_protests)
by_month_table_2019 <- table(months(in_2019))
View(by_month_table_2019)
july_2020 <- by_month_table_2020["July"]
july_2019 <- by_month_table_2019["July"]
change_july_protests <- july_2020 - july_2019
change_july_protests
by_month_table_2020 <- table(months(in_2020))
View(by_month_table_2020)
by_month_table_2019 <- table(months(in_2019))
View(by_month_table_2019)
num_purposes <- length(unique(purpose))
num_purposes
get_purposes <- function() {
general_purposes <- str_replace(purpose, "\\+-", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
high_level_purpose
num_high_level <- length(high_level_purpose)
num_high_level
high_level_table <- table(high_level_purpose)
View(high_level_table)
write_report <- function(md_doc, fname="~/Documents/info201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
high_level_purpose <- get_purposes()
high_level_purpose
get_purposes <- function() {
general_purposes <- str_replace(purpose, "\\+-", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
high_level_purpose
num_purposes <- length(unique(purpose))
num_purposes
get_purposes <- function() {
general_purposes <- str_replace(purpose, "\\+-", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
mean_attendees <- mean(num_attendees, na.rm = TRUE)
mean_attendees
high_level_purpose <- get_purposes()
get_purposes <- function(purpose) {
general_purposes <- str_replace(purpose, "\\+-", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
library(stringr)
get_purposes <- function(purpose) {
general_purposes <- str_replace(purpose, "\\+-", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
library(stringr)
get_purposes <- function(purpose) {
general_purposes <- str_replace(purpose, "\\+", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
get_purposes <- function() {
general_purposes <- str_replace(purpose, "\\+-", "")
return(general_purposes)
}
num_high_level <- length(high_level_purpose)
num_high_level
high_level_purpose <- get_purposes()
get_purposes <- function() {
general_purposes <- str_replace(purpose, "\\", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
get_purposes <- function() {
general_purposes <- str_replace(purpose, "\\++++", "")
return(general_purposes)
}
high_level_purpose <- get_purposes()
get_purposes <- function() {
general_purposes <- str_replace(purpose, "\\+-", "")
return(general_purposes)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
filter_positions("Enviroment", "Earning")
filter_positions <- function(purpose, position_taken = NULL) {
# If 'position_taken' is not offered
if (is.null(position_taken)) {
# This function will filter based on purpose only
filtered_protests <- protests[protests$Purpose == purpose, ]
} else {
# Otherwise, this function will filter based on both purpose and position.
filtered_protests <- protests[protests$Purpose == purpose & protests$Position == position_taken, ]
}
return(filtered_protests)
}
filter_positions("Enviroment", "Earning")
filter_and_report("Enviroment", "Saving")
filter_and_report <- function(purpose, position_taken = NULL) {
# Filtered protests based on purpose and position_taken
filtered <- filter_positions(purpose, position_taken)
# Used 'format_doc' function to genderate the report
report <- format_doc(filtered, purpose, position_taken=NULL)
return(report)
filter_and_report("Enviroment", "Saving")
filter_and_report <- function(purpose, position_taken = NULL) {
# Filtered protests based on purpose and position_taken
filtered <- filter_positions(purpose, position_taken)
# Used 'format_doc' function to genderate the report
report <- format_doc(filtered, purpose, position_taken=NULL)
return(report)
}
filter_positions("Enviroment", "Saving")
high_level_table <- table(high_level_purpose)
View(high_level_table)
filter_positions <- function(purpose, position_taken = NULL) {
# If 'position_taken' is not offered
if (is.null(position_taken)) {
# This function will filter based on purpose only
filtered_protests <- protests[protests$Purpose == purpose, ]
} else {
# Otherwise, this function will filter based on both purpose and position.
filtered_protests <- protests[protests$Purpose == purpose & protests$Position == position_taken, ]
}
return(filtered_protests)
}
filter_positions("Enviroment", "Saving")
filter_and_report("Enviroment", "Saving")
filter_and_report <- function(purpose, position_taken = NULL) {
# Filtered protests based on purpose and position_taken
filtered <- filter_positions(purpose, position_taken)
# Used 'format_doc' function to genderate the report
report <- format_doc(filtered, purpose, position_taken=NULL)
return(report)
}
filter_and_report("Enviroment", "Saving")
filter_and_report("Healthcare", "Saving")
